{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NOT_CONCATENABLE","OPERATORS","isANumber","button","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","formula","resultCalculated","calculate","bind","assertThisInitialized","canConcatOperator","canConcatDecimal","handleClick","getInitialFormula","slice","indexOfOperations","i","length","push","calculated","forEach","setState","lastChar","filter","symbol","lastOperator","addZero","_loop","newDisplay","newFormula","lastResult","split","canConcat","decimalToAdd","result","toString","_this2","react_default","a","createElement","id","onClick","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,SAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,MACxCC,EAAY,CAAC,IAAK,IAAK,IAAK,KAU5BC,EAAY,SAACC,GACjB,OAAIA,GAAU,GAyMDC,cAjMb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,IACTC,QAAS,GACTC,kBAAkB,GAGpBV,EAAKW,UAAYX,EAAKW,UAAUC,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACjBA,EAAKc,kBAAoBd,EAAKc,kBAAkBF,KAAvBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACzBA,EAAKe,iBAAmBf,EAAKe,iBAAiBH,KAAtBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACxBA,EAAKgB,YAAchB,EAAKgB,YAAYJ,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACnBA,EAAKiB,kBAAoBjB,EAAKiB,kBAAkBL,KAAvBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAZRA,2EAgBjB,IACIS,EAAUN,KAAKI,MAAME,QACpBN,KAAKW,sBACRL,EAAUA,EAAQS,MAAM,GAAI,IAM9B,IAJA,IAGIC,EAAoB,GAChBC,EAAI,EAAGA,EAAIX,EAAQY,OAAQD,IACd,MAAfX,EAAQW,IAA6B,MAAfX,EAAQW,IAChCD,EAAkBG,KAAKF,GAG3B,IAAI,IAAIA,EAAI,EAAGA,EAAIX,EAAQY,OAAQD,IACd,MAAfX,EAAQW,IAA6B,MAAfX,EAAQW,IAChCD,EAAkBG,KAAKF,GAK3B,IADA,IAAIG,EAAa,GACTH,EAAI,EAAGA,EAAID,EAAmBC,IACpCG,EAAWD,MAAK,GAUlB,OARAH,EAAkBK,QAAQ,SAACJ,MAI3BX,GAAW,KAvBE,EAyBbN,KAAKsB,SAAS,CAAEf,kBAAkB,IAE3B,CA3BM,EA2BID,+CAIjB,IAAIiB,EAAWvB,KAAKI,MAAMC,QAAQL,KAAKI,MAAMC,QAAQa,OAAS,GAE9D,OADgF,IAA3D1B,EAAUgC,OAAO,SAAAC,GAAM,OAAIF,IAAaE,IAAQP,kDASrE,IAHA,IAAIQ,EAAe,GACfC,GAAU,EACVrB,EAAUN,KAAKI,MAAME,QAHRsB,EAAA,SAITX,GACN,GAAwE,IAApE1B,EAAiBiC,OAAO,SAAAC,GAAM,OAAInB,EAAQW,KAAOQ,IAAQP,OAG3D,OAFID,IAAMX,EAAQY,OAAS,IAAKS,GAAU,GAC1CD,EAAepB,EAAQW,GACvB,SAJIA,EAAIX,EAAQY,OAAS,EAAGD,GAAK,EAAGA,IAAK,cAAAW,EAArCX,GAIJ,MAGJ,MAAqB,MAAjBS,EACK,EAAC,EAAOC,GAEV,EAAC,EAAMA,uCAIJjC,GACV,IAAImC,EAAqC,MAAvB7B,KAAKI,MAAMC,SAAmBZ,EAAUC,GAAW,GAAKM,KAAKI,MAAMC,QACjFyB,EAAa9B,KAAKc,kBAAkBpB,GACxC,GAAIM,KAAKI,MAAMG,mBA5FJ,IA4FwBb,EAEjC,GADAM,KAAKsB,SAAS,CAAEf,kBAAkB,IAC9Bb,GAAU,EACZmC,EAAa,GACbC,EAAa,OACR,CACL,IAAIC,EAAaD,EAAWE,MAAM,KAAK,GACvCH,EAAaE,EACbD,EAAaC,EAGjB,OAAOrC,GACL,KA5GM,EA6GJmC,EAAa,IACT7B,KAAKW,oBACPmB,GAAc,IAEdA,EAAaA,EAAWf,MAAM,GAAI,GAAK,IAEzC,MACF,KAnHW,EAoHTc,EAAa,IACT7B,KAAKW,oBACPmB,GAAc,IAEdA,EAAaA,EAAWf,MAAM,GAAI,GAAK,IAEzC,MACF,KA1HW,EA2HTc,EAAa,IACT7B,KAAKW,oBACPmB,GAAc,IAEdA,EAAaA,EAAWf,MAAM,GAAI,GAAK,IAEzC,MACF,KAjIS,EAkIPc,EAAa,IACT7B,KAAKW,oBACPmB,GAAc,IAEdA,EAAaA,EAAWf,MAAM,GAAI,GAAK,IAEzC,MACF,KAtIU,EAuIR,IAAIkB,EAAYjC,KAAKY,mBACrB,GAAIqB,EAAU,GAAI,CAChB,IAAIC,EAAe,GACfD,EAAU,IACZC,EAAe,KACfL,EAAa,IAEbK,EAAe,IAEjBL,GAAcK,EACdJ,GAAcI,EAEhB,MACF,KAtJS,EAuJP,GAAIlC,KAAKI,MAAMG,iBAAkB,MACjC,IAAI4B,EAASnC,KAAKQ,YAClBqB,EAAaM,EAAO,GACpBL,EAAaK,EAAO,GACpB,MACF,KA3JQ,EA4JNN,EAAa,IACbC,EAAa,GACb,MACF,QACE9B,KAAKW,oBAAsBkB,GAAcnC,EAAO0C,WAAaP,EAAanC,EAC1EoC,GAAcpC,EAElBM,KAAKsB,SAAS,CAAEjB,QAASwB,EAAYvB,QAASwB,8CAG9BpC,GAChB,MAA2B,KAAvBM,KAAKI,MAAME,QACTb,EAAUC,GACL,GAEA,IAGFM,KAAKI,MAAME,yCAIb,IAAA+B,EAAArC,KACP,OACEsC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASC,QAAU,kBAAML,EAAKxB,aAtL/B,KAsLP,KACAyB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAAhE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAA/D,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAA/D,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAAjE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAAhE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAAhE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAA/D,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAAjE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAAjE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,QAAU,kBAAML,EAAKxB,YAAY,IAAK8B,UAAW,UAAhE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,QAAU,kBAAML,EAAKxB,aArM/B,IAqMkD8B,UAAW,aAAjE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAWC,QAAU,kBAAML,EAAKxB,aArM/B,IAqMuD8B,UAAW,aAA3E,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAWC,QAAU,kBAAML,EAAKxB,aArM/B,IAqMuD8B,UAAW,aAA3E,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASC,QAAU,kBAAML,EAAKxB,aArM/B,IAqMqD8B,UAAW,aAAvE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUC,QAAU,kBAAML,EAAKxB,aAnM/B,IAmMsD8B,UAAW,UAAzE,KACAL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,QAAU,kBAAML,EAAKxB,aArM/B,KAqMN,MACAyB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAYzC,KAAKI,MAAME,SAC/BgC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAYzC,KAAKI,MAAMC,iBA5LrBuC,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cda967e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst NOT_CONCATENABLE = [\"+\", \"-\", \"x\", \"/\", \".\"];\nconst OPERATORS = [\"+\", \"-\", \"x\", \"/\"];\n\nconst ADD = -1;\nconst SUBTRACT = -2;\nconst MULTIPLY = -3;\nconst DIVIDE = -4;\nconst EQUALS = -5;\nconst CLEAR = -6;\nconst DECIMAL = -7;\n\nconst isANumber = (button) => { \n  if (button > -1) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: '0',\n      formula: '',\n      resultCalculated: false\n    };\n\n    this.calculate = this.calculate.bind(this);\n    this.canConcatOperator = this.canConcatOperator.bind(this);\n    this.canConcatDecimal = this.canConcatDecimal.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.getInitialFormula = this.getInitialFormula.bind(this);\n  }\n\n  calculate() {\n    let display = \"\";\n    let formula = this.state.formula;\n    if (!this.canConcatOperator()) {\n      formula = formula.slice(0, -1);\n    }\n    let result = 0;\n    // TODO operation logic\n    // solve the order of the operations\n    let indexOfOperations = [];\n    for(let i = 0; i < formula.length; i++) {\n      if (formula[i] === \"x\" || formula[i] === \"/\") {\n        indexOfOperations.push(i);\n      }\n    }\n    for(let i = 0; i < formula.length; i++) {\n      if (formula[i] === \"+\" || formula[i] === \"-\") {\n        indexOfOperations.push(i);\n      }\n    }\n    // get numbers around the operators\n    let calculated = [];\n    for(let i = 0; i > indexOfOperations; i++) {\n      calculated.push(false);\n    }\n    indexOfOperations.forEach((i) => {\n      \n    });\n\n    formula += \"=\" + result;\n    display = result;\n    this.setState({ resultCalculated: true });\n    // array has this structure -> [newDisplay, newFormula]\n    return [display, formula];\n  }\n\n  canConcatOperator() {\n    let lastChar = this.state.display[this.state.display.length - 1];\n    let canConcatenate = OPERATORS.filter(symbol => lastChar === symbol).length === 0;\n    return canConcatenate;\n  }\n\n  // returns true if can concatenate, and if it needs to add a zero\n  canConcatDecimal() {\n    let lastOperator = \"\";\n    let addZero = false;\n    let formula = this.state.formula;\n    for(let i = formula.length - 1; i >= 0; i--) {\n      if (NOT_CONCATENABLE.filter(symbol => formula[i] === symbol).length !== 0) {\n        if (i === formula.length - 1) { addZero = true; }\n        lastOperator = formula[i];\n        break;\n      }\n    }\n    if (lastOperator === \".\") {\n      return [false, addZero];\n    }\n    return [true, addZero];\n  }\n\n\n  handleClick(button) {\n    let newDisplay = (this.state.display === \"0\" && isANumber(button)) ? \"\" : this.state.display;\n    let newFormula = this.getInitialFormula(button);\n    if (this.state.resultCalculated && button !== EQUALS) {\n      this.setState({ resultCalculated: false });\n      if (button >= 0) {\n        newDisplay = \"\";\n        newFormula = \"\";\n      } else {\n        let lastResult = newFormula.split(\"=\")[1];\n        newDisplay = lastResult;\n        newFormula = lastResult;\n      }\n    }\n    switch(button) {\n      case(ADD):\n        newDisplay = \"+\";\n        if (this.canConcatOperator()) {\n          newFormula += \"+\";\n        } else {\n          newFormula = newFormula.slice(0, -1) + \"+\";\n        }\n        break;\n      case(SUBTRACT):\n        newDisplay = \"-\";\n        if (this.canConcatOperator()) {\n          newFormula += \"-\";\n        } else {\n          newFormula = newFormula.slice(0, -1) + \"-\";\n        }\n        break;\n      case(MULTIPLY):\n        newDisplay = \"x\";\n        if (this.canConcatOperator()) {\n          newFormula += \"x\";\n        } else {\n          newFormula = newFormula.slice(0, -1) + \"x\";\n        }\n        break;\n      case(DIVIDE):\n        newDisplay = \"/\";\n        if (this.canConcatOperator()) {\n          newFormula += \"/\";\n        } else {\n          newFormula = newFormula.slice(0, -1) + \"/\";\n        }\n        break;\n      case(DECIMAL):\n        let canConcat = this.canConcatDecimal();\n        if (canConcat[0]) {\n          let decimalToAdd = \"\";\n          if (canConcat[1]) {\n            decimalToAdd = \"0.\";\n            newDisplay = \"\";\n          } else {\n            decimalToAdd = \".\";\n          }\n          newDisplay += decimalToAdd;\n          newFormula += decimalToAdd;\n        }\n        break;\n      case(EQUALS):\n        if (this.state.resultCalculated) break; \n        let result = this.calculate();\n        newDisplay = result[0];\n        newFormula = result[1];\n        break;\n      case(CLEAR):\n        newDisplay = \"0\";\n        newFormula = \"\";\n        break;\n      default:\n        this.canConcatOperator() ? newDisplay += button.toString() : newDisplay = button;\n        newFormula += button;\n    }\n    this.setState({ display: newDisplay, formula: newFormula });\n  }\n\n  getInitialFormula(button) {\n    if (this.state.formula === \"\") {\n      if (isANumber(button)) {\n        return \"\";\n      } else {\n        return \"0\";\n      }\n    } else {\n      return this.state.formula;\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <div id=\"equals\" onClick={ () => this.handleClick(EQUALS) }>=</div>\n        <div id=\"zero\" onClick={ () => this.handleClick(0) } className={\"number\"}>0</div>\n        <div id=\"one\" onClick={ () => this.handleClick(1) } className={\"number\"}>1</div>\n        <div id=\"two\" onClick={ () => this.handleClick(2) } className={\"number\"}>2</div>\n        <div id=\"three\" onClick={ () => this.handleClick(3) } className={\"number\"}>3</div>\n        <div id=\"four\" onClick={ () => this.handleClick(4) } className={\"number\"}>4</div>\n        <div id=\"five\" onClick={ () => this.handleClick(5) } className={\"number\"}>5</div>\n        <div id=\"six\" onClick={ () => this.handleClick(6) } className={\"number\"}>6</div>\n        <div id=\"seven\" onClick={ () => this.handleClick(7) } className={\"number\"}>7</div>\n        <div id=\"eight\" onClick={ () => this.handleClick(8) } className={\"number\"}>8</div>\n        <div id=\"nine\" onClick={ () => this.handleClick(9) } className={\"number\"}>9</div>\n        <div id=\"add\" onClick={ () => this.handleClick(ADD) } className={\"operation\"}>+</div>\n        <div id=\"subtract\" onClick={ () => this.handleClick(SUBTRACT) } className={\"operation\"}>-</div>\n        <div id=\"multiply\" onClick={ () => this.handleClick(MULTIPLY) } className={\"operation\"}>X</div>\n        <div id=\"divide\" onClick={ () => this.handleClick(DIVIDE) } className={\"operation\"}>/</div>\n        <div id=\"decimal\" onClick={ () => this.handleClick(DECIMAL) } className={\"number\"}>.</div>\n        <div id=\"clear\" onClick={ () => this.handleClick(CLEAR) }>AC</div>\n        <div id=\"formula\">{ this.state.formula }</div>\n        <div id=\"display\">{ this.state.display }</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}